
StairClimberMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000b58  00000bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800132  00800132  00000c1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000330  00000000  00000000  00000c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006fa4  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000187e  00000000  00000000  00007f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cc3  00000000  00000000  000097e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008bc  00000000  00000000  0000b4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002321  00000000  00000000  0000bd64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000373f  00000000  00000000  0000e085  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  000117c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__dtors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_3>
  10:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_3>
  14:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <__vector_3>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_16>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	8e 00       	.word	0x008e	; ????

000000c4 <__ctors_end>:
  c4:	95 00       	.word	0x0095	; ????

000000c6 <__dtors_end>:
  c6:	11 24       	eor	r1, r1
  c8:	1f be       	out	0x3f, r1	; 63
  ca:	cf ef       	ldi	r28, 0xFF	; 255
  cc:	d8 e0       	ldi	r29, 0x08	; 8
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
  d2:	11 e0       	ldi	r17, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	e8 e5       	ldi	r30, 0x58	; 88
  da:	fb e0       	ldi	r31, 0x0B	; 11
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
  de:	05 90       	lpm	r0, Z+
  e0:	0d 92       	st	X+, r0
  e2:	a2 33       	cpi	r26, 0x32	; 50
  e4:	b1 07       	cpc	r27, r17
  e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	a2 e3       	ldi	r26, 0x32	; 50
  ec:	b1 e0       	ldi	r27, 0x01	; 1
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
  f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
  f2:	ae 39       	cpi	r26, 0x9E	; 158
  f4:	b2 07       	cpc	r27, r18
  f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	c2 e6       	ldi	r28, 0x62	; 98
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
 100:	21 97       	sbiw	r28, 0x01	; 1
 102:	fe 01       	movw	r30, r28
 104:	0e 94 99 05 	call	0xb32	; 0xb32 <__tablejump2__>
 108:	c1 36       	cpi	r28, 0x61	; 97
 10a:	d1 07       	cpc	r29, r17
 10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
 10e:	0e 94 5f 03 	call	0x6be	; 0x6be <main>
 112:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__do_global_dtors>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <loop>:
	}
}
bool Seuil_CNY(int pin, int seuil)
{
	return Lecture_CNY(pin) < seuil;
}
 11a:	08 95       	ret

0000011c <_GLOBAL__sub_I_DPins>:
#include "SoftwareSerial.h"

int DPins[] = {3,4,5,6,8,9,10,11,12,13};
int APins[] = {A0,A1,A2,A3,A5};
int mot1=5, mot2=6, mot3=9, mot4=10, mot56=3;
SoftwareSerial bluetooth(1, 0);
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	82 e3       	ldi	r24, 0x32	; 50
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0c 94 a5 02 	jmp	0x54a	; 0x54a <_ZN14SoftwareSerialC1Ehhb>

0000012a <_GLOBAL__sub_D_DPins>:
 12a:	82 e3       	ldi	r24, 0x32	; 50
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0c 94 4c 02 	jmp	0x498	; 0x498 <_ZN14SoftwareSerialD1Ev>

00000132 <setup>:

#define pinCNYD A1;
#define pinCNYG A2;


void setup() {
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
bluetooth.begin(9600);
 136:	40 e8       	ldi	r20, 0x80	; 128
 138:	55 e2       	ldi	r21, 0x25	; 37
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN14SoftwareSerial5beginEl>
delay(25);
 146:	69 e1       	ldi	r22, 0x19	; 25
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 07 04 	call	0x80e	; 0x80e <delay>
pinMode(A4,OUTPUT);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	82 e1       	ldi	r24, 0x12	; 18
 156:	0e 94 c4 04 	call	0x988	; 0x988 <pinMode>
	if(bluetooth.available()){
		etat = bluetooth.read();	
	}
	if (analogRead(A4)<50)
	{
		etat='M';
 15a:	cd e4       	ldi	r28, 0x4D	; 77

void setup() {
bluetooth.begin(9600);
delay(25);
pinMode(A4,OUTPUT);
while(etat!='M'){
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 160:	8d 34       	cpi	r24, 0x4D	; 77
 162:	d1 f0       	breq	.+52     	; 0x198 <setup+0x66>
	delay(25);
 164:	69 e1       	ldi	r22, 0x19	; 25
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 07 04 	call	0x80e	; 0x80e <delay>
	if(bluetooth.available()){
 170:	82 e3       	ldi	r24, 0x32	; 50
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <_ZN14SoftwareSerial9availableEv>
 178:	89 2b       	or	r24, r25
 17a:	31 f0       	breq	.+12     	; 0x188 <setup+0x56>
		etat = bluetooth.read();	
 17c:	82 e3       	ldi	r24, 0x32	; 50
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_ZN14SoftwareSerial4readEv>
 184:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	if (analogRead(A4)<50)
 188:	82 e1       	ldi	r24, 0x12	; 18
 18a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <analogRead>
 18e:	c2 97       	sbiw	r24, 0x32	; 50
 190:	2c f7       	brge	.-54     	; 0x15c <setup+0x2a>
	{
		etat='M';
 192:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 196:	e2 cf       	rjmp	.-60     	; 0x15c <setup+0x2a>
 198:	cb e0       	ldi	r28, 0x0B	; 11
 19a:	d1 e0       	ldi	r29, 0x01	; 1
	}
}
for (int i = 0; i < sizeof(DPins);i++)
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	c3 33       	cpi	r28, 0x33	; 51
 1a0:	d8 07       	cpc	r29, r24
 1a2:	31 f0       	breq	.+12     	; 0x1b0 <setup+0x7e>
{
	pinMode(DPins[i],OUTPUT);
 1a4:	88 81       	ld	r24, Y
 1a6:	22 96       	adiw	r28, 0x02	; 2
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	0e 94 c4 04 	call	0x988	; 0x988 <pinMode>
	if (analogRead(A4)<50)
	{
		etat='M';
	}
}
for (int i = 0; i < sizeof(DPins);i++)
 1ae:	f6 cf       	rjmp	.-20     	; 0x19c <setup+0x6a>
 1b0:	c1 e0       	ldi	r28, 0x01	; 1
 1b2:	d1 e0       	ldi	r29, 0x01	; 1
{
	pinMode(DPins[i],OUTPUT);
}
for(int i=0; i < sizeof(APins); i++)
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	c5 31       	cpi	r28, 0x15	; 21
 1b8:	d8 07       	cpc	r29, r24
 1ba:	31 f0       	breq	.+12     	; 0x1c8 <setup+0x96>
{
	pinMode(APins[i],INPUT);
 1bc:	88 81       	ld	r24, Y
 1be:	22 96       	adiw	r28, 0x02	; 2
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	0e 94 c4 04 	call	0x988	; 0x988 <pinMode>
}
for (int i = 0; i < sizeof(DPins);i++)
{
	pinMode(DPins[i],OUTPUT);
}
for(int i=0; i < sizeof(APins); i++)
 1c6:	f6 cf       	rjmp	.-20     	; 0x1b4 <setup+0x82>
{
	pinMode(APins[i],INPUT);
}
pinMode(2,INPUT);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 c4 04 	call	0x988	; 0x988 <pinMode>
pinMode(7,INPUT);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	87 e0       	ldi	r24, 0x07	; 7
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
for(int i=0; i < sizeof(APins); i++)
{
	pinMode(APins[i],INPUT);
}
pinMode(2,INPUT);
pinMode(7,INPUT);
 1d8:	0c 94 c4 04 	jmp	0x988	; 0x988 <pinMode>

000001dc <_ZN5Print17availableForWriteEv>:
uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
    return num - sub;
  else
    return 1;
}
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	08 95       	ret

000001e2 <_ZN14SoftwareSerial4readEv>:
 1e2:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <_ZN14SoftwareSerial13active_objectE>
 1e6:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <_ZN14SoftwareSerial13active_objectE+0x1>
 1ea:	28 17       	cp	r18, r24
 1ec:	39 07       	cpc	r19, r25
 1ee:	b9 f4       	brne	.+46     	; 0x21e <_ZN14SoftwareSerial4readEv+0x3c>
 1f0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 1f4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 1f8:	98 17       	cp	r25, r24
 1fa:	89 f0       	breq	.+34     	; 0x21e <_ZN14SoftwareSerial4readEv+0x3c>
 1fc:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ed 5a       	subi	r30, 0xAD	; 173
 204:	fe 4f       	sbci	r31, 0xFE	; 254
 206:	80 81       	ld	r24, Z
 208:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	2f 73       	andi	r18, 0x3F	; 63
 214:	33 27       	eor	r19, r19
 216:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	08 95       	ret
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	9f ef       	ldi	r25, 0xFF	; 255
 222:	08 95       	ret

00000224 <_ZN14SoftwareSerial5writeEh>:
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	dc 01       	movw	r26, r24
 22c:	5c 96       	adiw	r26, 0x1c	; 28
 22e:	8d 91       	ld	r24, X+
 230:	9c 91       	ld	r25, X
 232:	5d 97       	sbiw	r26, 0x1d	; 29
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	39 f4       	brne	.+14     	; 0x246 <_ZN14SoftwareSerial5writeEh+0x22>
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	13 96       	adiw	r26, 0x03	; 3
 23e:	3c 93       	st	X, r19
 240:	2e 93       	st	-X, r18
 242:	12 97       	sbiw	r26, 0x02	; 2
 244:	3b c0       	rjmp	.+118    	; 0x2bc <_ZN14SoftwareSerial5writeEh+0x98>
 246:	51 96       	adiw	r26, 0x11	; 17
 248:	ed 91       	ld	r30, X+
 24a:	fc 91       	ld	r31, X
 24c:	52 97       	sbiw	r26, 0x12	; 18
 24e:	50 96       	adiw	r26, 0x10	; 16
 250:	2c 91       	ld	r18, X
 252:	50 97       	sbiw	r26, 0x10	; 16
 254:	32 2f       	mov	r19, r18
 256:	30 95       	com	r19
 258:	1f b7       	in	r17, 0x3f	; 63
 25a:	5e 96       	adiw	r26, 0x1e	; 30
 25c:	4c 91       	ld	r20, X
 25e:	5e 97       	sbiw	r26, 0x1e	; 30
 260:	74 2f       	mov	r23, r20
 262:	72 70       	andi	r23, 0x02	; 2
 264:	41 fd       	sbrc	r20, 1
 266:	60 95       	com	r22
 268:	f8 94       	cli
 26a:	40 81       	ld	r20, Z
 26c:	77 23       	and	r23, r23
 26e:	11 f0       	breq	.+4      	; 0x274 <_ZN14SoftwareSerial5writeEh+0x50>
 270:	42 2b       	or	r20, r18
 272:	01 c0       	rjmp	.+2      	; 0x276 <_ZN14SoftwareSerial5writeEh+0x52>
 274:	43 23       	and	r20, r19
 276:	40 83       	st	Z, r20
 278:	ec 01       	movw	r28, r24
 27a:	21 97       	sbiw	r28, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <_ZN14SoftwareSerial5writeEh+0x56>
 27e:	48 e0       	ldi	r20, 0x08	; 8
 280:	50 81       	ld	r21, Z
 282:	60 ff       	sbrs	r22, 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <_ZN14SoftwareSerial5writeEh+0x66>
 286:	52 2b       	or	r21, r18
 288:	01 c0       	rjmp	.+2      	; 0x28c <_ZN14SoftwareSerial5writeEh+0x68>
 28a:	53 23       	and	r21, r19
 28c:	50 83       	st	Z, r21
 28e:	ec 01       	movw	r28, r24
 290:	21 97       	sbiw	r28, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <_ZN14SoftwareSerial5writeEh+0x6c>
 294:	66 95       	lsr	r22
 296:	41 50       	subi	r20, 0x01	; 1
 298:	99 f7       	brne	.-26     	; 0x280 <_ZN14SoftwareSerial5writeEh+0x5c>
 29a:	80 81       	ld	r24, Z
 29c:	77 23       	and	r23, r23
 29e:	19 f0       	breq	.+6      	; 0x2a6 <_ZN14SoftwareSerial5writeEh+0x82>
 2a0:	83 23       	and	r24, r19
 2a2:	80 83       	st	Z, r24
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <_ZN14SoftwareSerial5writeEh+0x86>
 2a6:	28 2b       	or	r18, r24
 2a8:	20 83       	st	Z, r18
 2aa:	1f bf       	out	0x3f, r17	; 63
 2ac:	5c 96       	adiw	r26, 0x1c	; 28
 2ae:	8d 91       	ld	r24, X+
 2b0:	9c 91       	ld	r25, X
 2b2:	5d 97       	sbiw	r26, 0x1d	; 29
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <_ZN14SoftwareSerial5writeEh+0x90>
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	08 95       	ret

000002c4 <_ZN14SoftwareSerial5flushEv>:
 2c4:	08 95       	ret

000002c6 <_ZN14SoftwareSerial4peekEv>:
 2c6:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <_ZN14SoftwareSerial13active_objectE>
 2ca:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <_ZN14SoftwareSerial13active_objectE+0x1>
 2ce:	28 17       	cp	r18, r24
 2d0:	39 07       	cpc	r19, r25
 2d2:	71 f4       	brne	.+28     	; 0x2f0 <_ZN14SoftwareSerial4peekEv+0x2a>
 2d4:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 2d8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 2dc:	98 17       	cp	r25, r24
 2de:	41 f0       	breq	.+16     	; 0x2f0 <_ZN14SoftwareSerial4peekEv+0x2a>
 2e0:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	ed 5a       	subi	r30, 0xAD	; 173
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	80 81       	ld	r24, Z
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	9f ef       	ldi	r25, 0xFF	; 255
 2f4:	08 95       	ret

000002f6 <_ZN14SoftwareSerial9availableEv>:
 2f6:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <_ZN14SoftwareSerial13active_objectE>
 2fa:	30 91 94 01 	lds	r19, 0x0194	; 0x800194 <_ZN14SoftwareSerial13active_objectE+0x1>
 2fe:	28 17       	cp	r18, r24
 300:	39 07       	cpc	r19, r25
 302:	71 f4       	brne	.+28     	; 0x320 <_ZN14SoftwareSerial9availableEv+0x2a>
 304:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 308:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	80 5c       	subi	r24, 0xC0	; 192
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	82 1b       	sub	r24, r18
 314:	91 09       	sbc	r25, r1
 316:	60 e4       	ldi	r22, 0x40	; 64
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	0e 94 30 05 	call	0xa60	; 0xa60 <__divmodhi4>
 31e:	08 95       	ret
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	08 95       	ret

00000326 <_ZN14SoftwareSerial13stopListeningEv>:
 326:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <_ZN14SoftwareSerial13active_objectE>
 32a:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <_ZN14SoftwareSerial13active_objectE+0x1>
 32e:	e8 17       	cp	r30, r24
 330:	f9 07       	cpc	r31, r25
 332:	69 f4       	brne	.+26     	; 0x34e <_ZN14SoftwareSerial13stopListeningEv+0x28>
 334:	a3 89       	ldd	r26, Z+19	; 0x13
 336:	b4 89       	ldd	r27, Z+20	; 0x14
 338:	9c 91       	ld	r25, X
 33a:	85 89       	ldd	r24, Z+21	; 0x15
 33c:	80 95       	com	r24
 33e:	89 23       	and	r24, r25
 340:	8c 93       	st	X, r24
 342:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <_ZN14SoftwareSerial13active_objectE+0x1>
 346:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <_ZN14SoftwareSerial13active_objectE>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret

00000352 <_ZN14SoftwareSerial6listenEv>:
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
 358:	8a 8d       	ldd	r24, Y+26	; 0x1a
 35a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 35c:	89 2b       	or	r24, r25
 35e:	f1 f0       	breq	.+60     	; 0x39c <_ZN14SoftwareSerial6listenEv+0x4a>
 360:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <_ZN14SoftwareSerial13active_objectE>
 364:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <_ZN14SoftwareSerial13active_objectE+0x1>
 368:	c8 17       	cp	r28, r24
 36a:	d9 07       	cpc	r29, r25
 36c:	b9 f0       	breq	.+46     	; 0x39c <_ZN14SoftwareSerial6listenEv+0x4a>
 36e:	00 97       	sbiw	r24, 0x00	; 0
 370:	11 f0       	breq	.+4      	; 0x376 <_ZN14SoftwareSerial6listenEv+0x24>
 372:	0e 94 93 01 	call	0x326	; 0x326 <_ZN14SoftwareSerial13stopListeningEv>
 376:	8e 8d       	ldd	r24, Y+30	; 0x1e
 378:	8e 7f       	andi	r24, 0xFE	; 254
 37a:	8e 8f       	std	Y+30, r24	; 0x1e
 37c:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 380:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 384:	d0 93 94 01 	sts	0x0194, r29	; 0x800194 <_ZN14SoftwareSerial13active_objectE+0x1>
 388:	c0 93 93 01 	sts	0x0193, r28	; 0x800193 <_ZN14SoftwareSerial13active_objectE>
 38c:	eb 89       	ldd	r30, Y+19	; 0x13
 38e:	fc 89       	ldd	r31, Y+20	; 0x14
 390:	90 81       	ld	r25, Z
 392:	8d 89       	ldd	r24, Y+21	; 0x15
 394:	89 2b       	or	r24, r25
 396:	80 83       	st	Z, r24
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	01 c0       	rjmp	.+2      	; 0x39e <_ZN14SoftwareSerial6listenEv+0x4c>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <__vector_3>:
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
 3c6:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <_ZN14SoftwareSerial13active_objectE>
 3ca:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <_ZN14SoftwareSerial13active_objectE+0x1>
 3ce:	30 97       	sbiw	r30, 0x00	; 0
 3d0:	09 f4       	brne	.+2      	; 0x3d4 <__vector_3+0x30>
 3d2:	51 c0       	rjmp	.+162    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 3d4:	96 8d       	ldd	r25, Z+30	; 0x1e
 3d6:	a6 85       	ldd	r26, Z+14	; 0x0e
 3d8:	b7 85       	ldd	r27, Z+15	; 0x0f
 3da:	85 85       	ldd	r24, Z+13	; 0x0d
 3dc:	91 ff       	sbrs	r25, 1
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <__vector_3+0x44>
 3e0:	9c 91       	ld	r25, X
 3e2:	89 23       	and	r24, r25
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <__vector_3+0x4c>
 3e6:	47 c0       	rjmp	.+142    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 3e8:	9c 91       	ld	r25, X
 3ea:	89 23       	and	r24, r25
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <__vector_3+0x4c>
 3ee:	43 c0       	rjmp	.+134    	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 3f0:	a3 89       	ldd	r26, Z+19	; 0x13
 3f2:	b4 89       	ldd	r27, Z+20	; 0x14
 3f4:	9c 91       	ld	r25, X
 3f6:	85 89       	ldd	r24, Z+21	; 0x15
 3f8:	80 95       	com	r24
 3fa:	89 23       	and	r24, r25
 3fc:	8c 93       	st	X, r24
 3fe:	86 89       	ldd	r24, Z+22	; 0x16
 400:	97 89       	ldd	r25, Z+23	; 0x17
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	60 8d       	ldd	r22, Z+24	; 0x18
 408:	71 8d       	ldd	r23, Z+25	; 0x19
 40a:	a6 85       	ldd	r26, Z+14	; 0x0e
 40c:	b7 85       	ldd	r27, Z+15	; 0x0f
 40e:	55 85       	ldd	r21, Z+13	; 0x0d
 410:	38 e0       	ldi	r19, 0x08	; 8
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	cb 01       	movw	r24, r22
 416:	01 97       	sbiw	r24, 0x01	; 1
 418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 41a:	82 2f       	mov	r24, r18
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	95 95       	asr	r25
 420:	87 95       	ror	r24
 422:	28 2f       	mov	r18, r24
 424:	4c 91       	ld	r20, X
 426:	45 23       	and	r20, r21
 428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	20 68       	ori	r18, 0x80	; 128
 42c:	31 50       	subi	r19, 0x01	; 1
 42e:	91 f7       	brne	.-28     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 430:	86 8d       	ldd	r24, Z+30	; 0x1e
 432:	81 fd       	sbrc	r24, 1
 434:	20 95       	com	r18
 436:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	8f 73       	andi	r24, 0x3F	; 63
 440:	99 27       	eor	r25, r25
 442:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <_ZN14SoftwareSerial20_receive_buffer_headE>
 446:	38 17       	cp	r19, r24
 448:	49 f0       	breq	.+18     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44a:	a0 91 52 01 	lds	r26, 0x0152	; 0x800152 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	ad 5a       	subi	r26, 0xAD	; 173
 452:	be 4f       	sbci	r27, 0xFE	; 254
 454:	2c 93       	st	X, r18
 456:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_ZN14SoftwareSerial20_receive_buffer_tailE>
 45a:	03 c0       	rjmp	.+6      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 45c:	86 8d       	ldd	r24, Z+30	; 0x1e
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	86 8f       	std	Z+30, r24	; 0x1e
 462:	82 8d       	ldd	r24, Z+26	; 0x1a
 464:	93 8d       	ldd	r25, Z+27	; 0x1b
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 46a:	a3 89       	ldd	r26, Z+19	; 0x13
 46c:	b4 89       	ldd	r27, Z+20	; 0x14
 46e:	9c 91       	ld	r25, X
 470:	85 89       	ldd	r24, Z+21	; 0x15
 472:	89 2b       	or	r24, r25
 474:	8c 93       	st	X, r24
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <_ZN14SoftwareSerialD1Ev>:
 498:	24 e2       	ldi	r18, 0x24	; 36
 49a:	31 e0       	ldi	r19, 0x01	; 1
 49c:	fc 01       	movw	r30, r24
 49e:	31 83       	std	Z+1, r19	; 0x01
 4a0:	20 83       	st	Z, r18
 4a2:	0c 94 93 01 	jmp	0x326	; 0x326 <_ZN14SoftwareSerial13stopListeningEv>

000004a6 <_ZN14SoftwareSerial5setTXEh>:
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	ec 01       	movw	r28, r24
 4ae:	16 2f       	mov	r17, r22
 4b0:	6e 8d       	ldd	r22, Y+30	; 0x1e
 4b2:	66 95       	lsr	r22
 4b4:	61 70       	andi	r22, 0x01	; 1
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	68 27       	eor	r22, r24
 4ba:	81 2f       	mov	r24, r17
 4bc:	0e 94 00 05 	call	0xa00	; 0xa00 <digitalWrite>
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	81 2f       	mov	r24, r17
 4c4:	0e 94 c4 04 	call	0x988	; 0x988 <pinMode>
 4c8:	81 2f       	mov	r24, r17
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	fc 01       	movw	r30, r24
 4ce:	e4 58       	subi	r30, 0x84	; 132
 4d0:	ff 4f       	sbci	r31, 0xFF	; 255
 4d2:	e4 91       	lpm	r30, Z
 4d4:	e8 8b       	std	Y+16, r30	; 0x10
 4d6:	fc 01       	movw	r30, r24
 4d8:	e0 57       	subi	r30, 0x70	; 112
 4da:	ff 4f       	sbci	r31, 0xFF	; 255
 4dc:	e4 91       	lpm	r30, Z
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	ee 0f       	add	r30, r30
 4e2:	ff 1f       	adc	r31, r31
 4e4:	e2 55       	subi	r30, 0x52	; 82
 4e6:	ff 4f       	sbci	r31, 0xFF	; 255
 4e8:	85 91       	lpm	r24, Z+
 4ea:	94 91       	lpm	r25, Z
 4ec:	9a 8b       	std	Y+18, r25	; 0x12
 4ee:	89 8b       	std	Y+17, r24	; 0x11
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	08 95       	ret

000004f8 <_ZN14SoftwareSerial5setRXEh>:
 4f8:	1f 93       	push	r17
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	ec 01       	movw	r28, r24
 500:	16 2f       	mov	r17, r22
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	81 2f       	mov	r24, r17
 506:	0e 94 c4 04 	call	0x988	; 0x988 <pinMode>
 50a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 50c:	81 fd       	sbrc	r24, 1
 50e:	04 c0       	rjmp	.+8      	; 0x518 <_ZN14SoftwareSerial5setRXEh+0x20>
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	81 2f       	mov	r24, r17
 514:	0e 94 00 05 	call	0xa00	; 0xa00 <digitalWrite>
 518:	1c 87       	std	Y+12, r17	; 0x0c
 51a:	81 2f       	mov	r24, r17
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	fc 01       	movw	r30, r24
 520:	e4 58       	subi	r30, 0x84	; 132
 522:	ff 4f       	sbci	r31, 0xFF	; 255
 524:	e4 91       	lpm	r30, Z
 526:	ed 87       	std	Y+13, r30	; 0x0d
 528:	fc 01       	movw	r30, r24
 52a:	e0 57       	subi	r30, 0x70	; 112
 52c:	ff 4f       	sbci	r31, 0xFF	; 255
 52e:	e4 91       	lpm	r30, Z
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	ee 0f       	add	r30, r30
 534:	ff 1f       	adc	r31, r31
 536:	ec 55       	subi	r30, 0x5C	; 92
 538:	ff 4f       	sbci	r31, 0xFF	; 255
 53a:	85 91       	lpm	r24, Z+
 53c:	94 91       	lpm	r25, Z
 53e:	9f 87       	std	Y+15, r25	; 0x0f
 540:	8e 87       	std	Y+14, r24	; 0x0e
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	1f 91       	pop	r17
 548:	08 95       	ret

0000054a <_ZN14SoftwareSerialC1Ehhb>:
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	ec 01       	movw	r28, r24
 552:	16 2f       	mov	r17, r22
 554:	1b 82       	std	Y+3, r1	; 0x03
 556:	1a 82       	std	Y+2, r1	; 0x02
 558:	88 ee       	ldi	r24, 0xE8	; 232
 55a:	93 e0       	ldi	r25, 0x03	; 3
 55c:	a0 e0       	ldi	r26, 0x00	; 0
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	8c 83       	std	Y+4, r24	; 0x04
 562:	9d 83       	std	Y+5, r25	; 0x05
 564:	ae 83       	std	Y+6, r26	; 0x06
 566:	bf 83       	std	Y+7, r27	; 0x07
 568:	84 e2       	ldi	r24, 0x24	; 36
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	99 83       	std	Y+1, r25	; 0x01
 56e:	88 83       	st	Y, r24
 570:	1f 8a       	std	Y+23, r1	; 0x17
 572:	1e 8a       	std	Y+22, r1	; 0x16
 574:	19 8e       	std	Y+25, r1	; 0x19
 576:	18 8e       	std	Y+24, r1	; 0x18
 578:	1b 8e       	std	Y+27, r1	; 0x1b
 57a:	1a 8e       	std	Y+26, r1	; 0x1a
 57c:	1d 8e       	std	Y+29, r1	; 0x1d
 57e:	1c 8e       	std	Y+28, r1	; 0x1c
 580:	8e 8d       	ldd	r24, Y+30	; 0x1e
 582:	8e 7f       	andi	r24, 0xFE	; 254
 584:	20 fb       	bst	r18, 0
 586:	81 f9       	bld	r24, 1
 588:	8e 8f       	std	Y+30, r24	; 0x1e
 58a:	64 2f       	mov	r22, r20
 58c:	ce 01       	movw	r24, r28
 58e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <_ZN14SoftwareSerial5setTXEh>
 592:	61 2f       	mov	r22, r17
 594:	ce 01       	movw	r24, r28
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_ZN14SoftwareSerial5setRXEh>

000005a0 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ec 01       	movw	r28, r24
 5a6:	9a 01       	movw	r18, r20
 5a8:	ab 01       	movw	r20, r22
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
 5aa:	1b 8e       	std	Y+27, r1	; 0x1b
 5ac:	1a 8e       	std	Y+26, r1	; 0x1a
 5ae:	19 8e       	std	Y+25, r1	; 0x19
 5b0:	18 8e       	std	Y+24, r1	; 0x18
 5b2:	1f 8a       	std	Y+23, r1	; 0x17
 5b4:	1e 8a       	std	Y+22, r1	; 0x16

  // Precalculate the various delays, in number of 4-cycle delays
  uint16_t bit_delay = (F_CPU / speed) / 4;
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	79 e0       	ldi	r23, 0x09	; 9
 5ba:	8d e3       	ldi	r24, 0x3D	; 61
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 66 05 	call	0xacc	; 0xacc <__divmodsi4>
 5c2:	f9 01       	movw	r30, r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5c4:	24 30       	cpi	r18, 0x04	; 4
 5c6:	31 05       	cpc	r19, r1
 5c8:	18 f0       	brcs	.+6      	; 0x5d0 <_ZN14SoftwareSerial5beginEl+0x30>
    return num - sub;
 5ca:	c9 01       	movw	r24, r18
 5cc:	03 97       	sbiw	r24, 0x03	; 3
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <_ZN14SoftwareSerial5beginEl+0x34>
  else
    return 1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
  // 12 (gcc 4.8.2) or 13 (gcc 4.3.2) cycles from start bit to first bit,
  // 15 (gcc 4.8.2) or 16 (gcc 4.3.2) cycles between bits,
  // 12 (gcc 4.8.2) or 14 (gcc 4.3.2) cycles from last bit to stop bit
  // These are all close enough to just use 15 cycles, since the inter-bit
  // timings are the most critical (deviations stack 8 times)
  _tx_delay = subtract_cap(bit_delay, 15 / 4);
 5d4:	9d 8f       	std	Y+29, r25	; 0x1d
 5d6:	8c 8f       	std	Y+28, r24	; 0x1c

  // Only setup rx when we have a valid PCINT for this pin
  if (digitalPinToPCICR((int8_t)_receivePin)) {
 5d8:	6c 85       	ldd	r22, Y+12	; 0x0c
 5da:	66 31       	cpi	r22, 0x16	; 22
 5dc:	08 f0       	brcs	.+2      	; 0x5e0 <_ZN14SoftwareSerial5beginEl+0x40>
 5de:	69 c0       	rjmp	.+210    	; 0x6b2 <_ZN14SoftwareSerial5beginEl+0x112>
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 5e0:	c9 01       	movw	r24, r18
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5e6:	84 31       	cpi	r24, 0x14	; 20
 5e8:	91 05       	cpc	r25, r1
 5ea:	10 f0       	brcs	.+4      	; 0x5f0 <_ZN14SoftwareSerial5beginEl+0x50>
    return num - sub;
 5ec:	43 97       	sbiw	r24, 0x13	; 19
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <_ZN14SoftwareSerial5beginEl+0x54>
  else
    return 1;
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
    // are 17 more cycles until the pin value is read (excluding the
    // delay in the loop).
    // We want to have a total delay of 1.5 bit time. Inside the loop,
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);
 5f4:	9f 8b       	std	Y+23, r25	; 0x17
 5f6:	8e 8b       	std	Y+22, r24	; 0x16
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 5f8:	36 97       	sbiw	r30, 0x06	; 6
 5fa:	18 f0       	brcs	.+6      	; 0x602 <_ZN14SoftwareSerial5beginEl+0x62>
    return num - sub;
 5fc:	c9 01       	movw	r24, r18
 5fe:	05 97       	sbiw	r24, 0x05	; 5
 600:	02 c0       	rjmp	.+4      	; 0x606 <_ZN14SoftwareSerial5beginEl+0x66>
  else
    return 1;
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
    // we already wait for 1 bit time - 23 cycles, so here we wait for
    // 0.5 bit time - (71 + 18 - 22) cycles.
    _rx_delay_centering = subtract_cap(bit_delay / 2, (4 + 4 + 75 + 17 - 23) / 4);

    // There are 23 cycles in each loop iteration (excluding the delay)
    _rx_delay_intrabit = subtract_cap(bit_delay, 23 / 4);
 606:	99 8f       	std	Y+25, r25	; 0x19
 608:	88 8f       	std	Y+24, r24	; 0x18
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 60a:	c9 01       	movw	r24, r18
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	28 0f       	add	r18, r24
 612:	39 1f       	adc	r19, r25
 614:	36 95       	lsr	r19
 616:	27 95       	ror	r18
 618:	36 95       	lsr	r19
 61a:	27 95       	ror	r18
  uint8_t port = digitalPinToPort(rx);
  _receivePortRegister = portInputRegister(port);
}

uint16_t SoftwareSerial::subtract_cap(uint16_t num, uint16_t sub) {
  if (num > sub)
 61c:	2d 30       	cpi	r18, 0x0D	; 13
 61e:	31 05       	cpc	r19, r1
 620:	18 f0       	brcs	.+6      	; 0x628 <_ZN14SoftwareSerial5beginEl+0x88>
    return num - sub;
 622:	2c 50       	subi	r18, 0x0C	; 12
 624:	31 09       	sbc	r19, r1
 626:	02 c0       	rjmp	.+4      	; 0x62c <_ZN14SoftwareSerial5beginEl+0x8c>
  else
    return 1;
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
    // mask is enabled again (which _must_ happen during the stopbit).
    // This delay aims at 3/4 of a bit time, meaning the end of the
    // delay will be at 1/4th of the stopbit. This allows some extra
    // time for ISR cleanup, which makes 115200 baud at 16Mhz work more
    // reliably
    _rx_delay_stopbit = subtract_cap(bit_delay * 3 / 4, (37 + 11) / 4);
 62c:	3b 8f       	std	Y+27, r19	; 0x1b
 62e:	2a 8f       	std	Y+26, r18	; 0x1a


    // Enable the PCINT for the entire port here, but never disable it
    // (others might also need it, so we disable the interrupt by using
    // the per-pin PCMSK register).
    *digitalPinToPCICR((int8_t)_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
 630:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
 634:	68 30       	cpi	r22, 0x08	; 8
 636:	50 f0       	brcs	.+20     	; 0x64c <_ZN14SoftwareSerial5beginEl+0xac>
 638:	21 e0       	ldi	r18, 0x01	; 1
 63a:	6e 30       	cpi	r22, 0x0E	; 14
 63c:	08 f4       	brcc	.+2      	; 0x640 <_ZN14SoftwareSerial5beginEl+0xa0>
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	01 c0       	rjmp	.+2      	; 0x646 <_ZN14SoftwareSerial5beginEl+0xa6>
 644:	88 0f       	add	r24, r24
 646:	2a 95       	dec	r18
 648:	ea f7       	brpl	.-6      	; 0x644 <_ZN14SoftwareSerial5beginEl+0xa4>
 64a:	01 c0       	rjmp	.+2      	; 0x64e <_ZN14SoftwareSerial5beginEl+0xae>
 64c:	84 e0       	ldi	r24, 0x04	; 4
 64e:	89 2b       	or	r24, r25
 650:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    // Precalculate the pcint mask register and value, so setRxIntMask
    // can be used inside the ISR without costing too much time.
    _pcint_maskreg = digitalPinToPCMSK(_receivePin);
 654:	9c 85       	ldd	r25, Y+12	; 0x0c
 656:	98 30       	cpi	r25, 0x08	; 8
 658:	38 f0       	brcs	.+14     	; 0x668 <_ZN14SoftwareSerial5beginEl+0xc8>
 65a:	9e 30       	cpi	r25, 0x0E	; 14
 65c:	40 f0       	brcs	.+16     	; 0x66e <_ZN14SoftwareSerial5beginEl+0xce>
 65e:	96 31       	cpi	r25, 0x16	; 22
 660:	48 f0       	brcs	.+18     	; 0x674 <_ZN14SoftwareSerial5beginEl+0xd4>
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	08 c0       	rjmp	.+16     	; 0x678 <_ZN14SoftwareSerial5beginEl+0xd8>
 668:	2d e6       	ldi	r18, 0x6D	; 109
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	05 c0       	rjmp	.+10     	; 0x678 <_ZN14SoftwareSerial5beginEl+0xd8>
 66e:	2b e6       	ldi	r18, 0x6B	; 107
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	02 c0       	rjmp	.+4      	; 0x678 <_ZN14SoftwareSerial5beginEl+0xd8>
 674:	2c e6       	ldi	r18, 0x6C	; 108
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	3c 8b       	std	Y+20, r19	; 0x14
 67a:	2b 8b       	std	Y+19, r18	; 0x13
    _pcint_maskvalue = _BV(digitalPinToPCMSKbit(_receivePin));
 67c:	98 30       	cpi	r25, 0x08	; 8
 67e:	30 f4       	brcc	.+12     	; 0x68c <_ZN14SoftwareSerial5beginEl+0xec>
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	01 c0       	rjmp	.+2      	; 0x686 <_ZN14SoftwareSerial5beginEl+0xe6>
 684:	88 0f       	add	r24, r24
 686:	9a 95       	dec	r25
 688:	ea f7       	brpl	.-6      	; 0x684 <_ZN14SoftwareSerial5beginEl+0xe4>
 68a:	0e c0       	rjmp	.+28     	; 0x6a8 <_ZN14SoftwareSerial5beginEl+0x108>
 68c:	29 2f       	mov	r18, r25
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	9e 30       	cpi	r25, 0x0E	; 14
 692:	18 f4       	brcc	.+6      	; 0x69a <_ZN14SoftwareSerial5beginEl+0xfa>
 694:	28 50       	subi	r18, 0x08	; 8
 696:	31 09       	sbc	r19, r1
 698:	02 c0       	rjmp	.+4      	; 0x69e <_ZN14SoftwareSerial5beginEl+0xfe>
 69a:	2e 50       	subi	r18, 0x0E	; 14
 69c:	31 09       	sbc	r19, r1
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <_ZN14SoftwareSerial5beginEl+0x104>
 6a2:	88 0f       	add	r24, r24
 6a4:	2a 95       	dec	r18
 6a6:	ea f7       	brpl	.-6      	; 0x6a2 <_ZN14SoftwareSerial5beginEl+0x102>
 6a8:	8d 8b       	std	Y+21, r24	; 0x15
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 6aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
 6ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <_ZN14SoftwareSerial5beginEl+0x10e>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 6b2:	ce 01       	movw	r24, r28
}
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
 6b8:	0c 94 a9 01 	jmp	0x352	; 0x352 <_ZN14SoftwareSerial6listenEv>

000006bc <initVariant>:
 6bc:	08 95       	ret

000006be <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
 6be:	0e 94 43 04 	call	0x886	; 0x886 <init>

	initVariant();
 6c2:	0e 94 5e 03 	call	0x6bc	; 0x6bc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6c6:	0e 94 99 00 	call	0x132	; 0x132 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6ca:	c0 e0       	ldi	r28, 0x00	; 0
 6cc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 6ce:	0e 94 8d 00 	call	0x11a	; 0x11a <loop>
		if (serialEventRun) serialEventRun();
 6d2:	20 97       	sbiw	r28, 0x00	; 0
 6d4:	e1 f3       	breq	.-8      	; 0x6ce <main+0x10>
 6d6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 6da:	f9 cf       	rjmp	.-14     	; 0x6ce <main+0x10>

000006dc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 6dc:	cf 92       	push	r12
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	6c 01       	movw	r12, r24
 6ee:	7a 01       	movw	r14, r20
 6f0:	8b 01       	movw	r16, r22
  size_t n = 0;
 6f2:	c0 e0       	ldi	r28, 0x00	; 0
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 6f6:	ce 15       	cp	r28, r14
 6f8:	df 05       	cpc	r29, r15
 6fa:	81 f0       	breq	.+32     	; 0x71c <_ZN5Print5writeEPKhj+0x40>
    if (write(*buffer++)) n++;
 6fc:	d8 01       	movw	r26, r16
 6fe:	6d 91       	ld	r22, X+
 700:	8d 01       	movw	r16, r26
 702:	d6 01       	movw	r26, r12
 704:	ed 91       	ld	r30, X+
 706:	fc 91       	ld	r31, X
 708:	01 90       	ld	r0, Z+
 70a:	f0 81       	ld	r31, Z
 70c:	e0 2d       	mov	r30, r0
 70e:	c6 01       	movw	r24, r12
 710:	09 95       	icall
 712:	89 2b       	or	r24, r25
 714:	11 f0       	breq	.+4      	; 0x71a <_ZN5Print5writeEPKhj+0x3e>
 716:	21 96       	adiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 718:	ee cf       	rjmp	.-36     	; 0x6f6 <_ZN5Print5writeEPKhj+0x1a>
 71a:	7e 01       	movw	r14, r28
    if (write(*buffer++)) n++;
    else break;
  }
  return n;
}
 71c:	c7 01       	movw	r24, r14
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	df 90       	pop	r13
 72c:	cf 90       	pop	r12
 72e:	08 95       	ret

00000730 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 730:	1f 92       	push	r1
 732:	0f 92       	push	r0
 734:	0f b6       	in	r0, 0x3f	; 63
 736:	0f 92       	push	r0
 738:	11 24       	eor	r1, r1
 73a:	2f 93       	push	r18
 73c:	3f 93       	push	r19
 73e:	8f 93       	push	r24
 740:	9f 93       	push	r25
 742:	af 93       	push	r26
 744:	bf 93       	push	r27
 746:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <timer0_millis>
 74a:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <timer0_millis+0x1>
 74e:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <timer0_millis+0x2>
 752:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <timer0_millis+0x3>
 756:	30 91 95 01 	lds	r19, 0x0195	; 0x800195 <timer0_fract>
 75a:	23 e0       	ldi	r18, 0x03	; 3
 75c:	23 0f       	add	r18, r19
 75e:	2d 37       	cpi	r18, 0x7D	; 125
 760:	20 f4       	brcc	.+8      	; 0x76a <__vector_16+0x3a>
 762:	01 96       	adiw	r24, 0x01	; 1
 764:	a1 1d       	adc	r26, r1
 766:	b1 1d       	adc	r27, r1
 768:	05 c0       	rjmp	.+10     	; 0x774 <__vector_16+0x44>
 76a:	26 e8       	ldi	r18, 0x86	; 134
 76c:	23 0f       	add	r18, r19
 76e:	02 96       	adiw	r24, 0x02	; 2
 770:	a1 1d       	adc	r26, r1
 772:	b1 1d       	adc	r27, r1
 774:	20 93 95 01 	sts	0x0195, r18	; 0x800195 <timer0_fract>
 778:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <timer0_millis>
 77c:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <timer0_millis+0x1>
 780:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <timer0_millis+0x2>
 784:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <timer0_millis+0x3>
 788:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <timer0_overflow_count>
 78c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <timer0_overflow_count+0x1>
 790:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <timer0_overflow_count+0x2>
 794:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <timer0_overflow_count+0x3>
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	a1 1d       	adc	r26, r1
 79c:	b1 1d       	adc	r27, r1
 79e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <timer0_overflow_count>
 7a2:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <timer0_overflow_count+0x1>
 7a6:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <timer0_overflow_count+0x2>
 7aa:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <timer0_overflow_count+0x3>
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <micros>:
 7c4:	3f b7       	in	r19, 0x3f	; 63
 7c6:	f8 94       	cli
 7c8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <timer0_overflow_count>
 7cc:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <timer0_overflow_count+0x1>
 7d0:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <timer0_overflow_count+0x2>
 7d4:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <timer0_overflow_count+0x3>
 7d8:	26 b5       	in	r18, 0x26	; 38
 7da:	a8 9b       	sbis	0x15, 0	; 21
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <micros+0x24>
 7de:	2f 3f       	cpi	r18, 0xFF	; 255
 7e0:	19 f0       	breq	.+6      	; 0x7e8 <micros+0x24>
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	a1 1d       	adc	r26, r1
 7e6:	b1 1d       	adc	r27, r1
 7e8:	3f bf       	out	0x3f, r19	; 63
 7ea:	ba 2f       	mov	r27, r26
 7ec:	a9 2f       	mov	r26, r25
 7ee:	98 2f       	mov	r25, r24
 7f0:	88 27       	eor	r24, r24
 7f2:	82 0f       	add	r24, r18
 7f4:	91 1d       	adc	r25, r1
 7f6:	a1 1d       	adc	r26, r1
 7f8:	b1 1d       	adc	r27, r1
 7fa:	bc 01       	movw	r22, r24
 7fc:	cd 01       	movw	r24, r26
 7fe:	42 e0       	ldi	r20, 0x02	; 2
 800:	66 0f       	add	r22, r22
 802:	77 1f       	adc	r23, r23
 804:	88 1f       	adc	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	4a 95       	dec	r20
 80a:	d1 f7       	brne	.-12     	; 0x800 <micros+0x3c>
 80c:	08 95       	ret

0000080e <delay>:
 80e:	8f 92       	push	r8
 810:	9f 92       	push	r9
 812:	af 92       	push	r10
 814:	bf 92       	push	r11
 816:	cf 92       	push	r12
 818:	df 92       	push	r13
 81a:	ef 92       	push	r14
 81c:	ff 92       	push	r15
 81e:	6b 01       	movw	r12, r22
 820:	7c 01       	movw	r14, r24
 822:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <micros>
 826:	4b 01       	movw	r8, r22
 828:	5c 01       	movw	r10, r24
 82a:	c1 14       	cp	r12, r1
 82c:	d1 04       	cpc	r13, r1
 82e:	e1 04       	cpc	r14, r1
 830:	f1 04       	cpc	r15, r1
 832:	01 f1       	breq	.+64     	; 0x874 <delay+0x66>
 834:	0e 94 2f 05 	call	0xa5e	; 0xa5e <yield>
 838:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <micros>
 83c:	dc 01       	movw	r26, r24
 83e:	cb 01       	movw	r24, r22
 840:	88 19       	sub	r24, r8
 842:	99 09       	sbc	r25, r9
 844:	aa 09       	sbc	r26, r10
 846:	bb 09       	sbc	r27, r11
 848:	88 3e       	cpi	r24, 0xE8	; 232
 84a:	93 40       	sbci	r25, 0x03	; 3
 84c:	a1 05       	cpc	r26, r1
 84e:	b1 05       	cpc	r27, r1
 850:	60 f3       	brcs	.-40     	; 0x82a <delay+0x1c>
 852:	21 e0       	ldi	r18, 0x01	; 1
 854:	c2 1a       	sub	r12, r18
 856:	d1 08       	sbc	r13, r1
 858:	e1 08       	sbc	r14, r1
 85a:	f1 08       	sbc	r15, r1
 85c:	88 ee       	ldi	r24, 0xE8	; 232
 85e:	88 0e       	add	r8, r24
 860:	83 e0       	ldi	r24, 0x03	; 3
 862:	98 1e       	adc	r9, r24
 864:	a1 1c       	adc	r10, r1
 866:	b1 1c       	adc	r11, r1
 868:	c1 14       	cp	r12, r1
 86a:	d1 04       	cpc	r13, r1
 86c:	e1 04       	cpc	r14, r1
 86e:	f1 04       	cpc	r15, r1
 870:	19 f7       	brne	.-58     	; 0x838 <delay+0x2a>
 872:	db cf       	rjmp	.-74     	; 0x82a <delay+0x1c>
 874:	ff 90       	pop	r15
 876:	ef 90       	pop	r14
 878:	df 90       	pop	r13
 87a:	cf 90       	pop	r12
 87c:	bf 90       	pop	r11
 87e:	af 90       	pop	r10
 880:	9f 90       	pop	r9
 882:	8f 90       	pop	r8
 884:	08 95       	ret

00000886 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 886:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 888:	84 b5       	in	r24, 0x24	; 36
 88a:	82 60       	ori	r24, 0x02	; 2
 88c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 88e:	84 b5       	in	r24, 0x24	; 36
 890:	81 60       	ori	r24, 0x01	; 1
 892:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 894:	85 b5       	in	r24, 0x25	; 37
 896:	82 60       	ori	r24, 0x02	; 2
 898:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 89a:	85 b5       	in	r24, 0x25	; 37
 89c:	81 60       	ori	r24, 0x01	; 1
 89e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8a0:	ee e6       	ldi	r30, 0x6E	; 110
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	80 81       	ld	r24, Z
 8a6:	81 60       	ori	r24, 0x01	; 1
 8a8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8aa:	e1 e8       	ldi	r30, 0x81	; 129
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8b0:	80 81       	ld	r24, Z
 8b2:	82 60       	ori	r24, 0x02	; 2
 8b4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8b6:	80 81       	ld	r24, Z
 8b8:	81 60       	ori	r24, 0x01	; 1
 8ba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8bc:	e0 e8       	ldi	r30, 0x80	; 128
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	81 60       	ori	r24, 0x01	; 1
 8c4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8c6:	e1 eb       	ldi	r30, 0xB1	; 177
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	84 60       	ori	r24, 0x04	; 4
 8ce:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 8d0:	e0 eb       	ldi	r30, 0xB0	; 176
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	80 81       	ld	r24, Z
 8d6:	81 60       	ori	r24, 0x01	; 1
 8d8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 8da:	ea e7       	ldi	r30, 0x7A	; 122
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	80 81       	ld	r24, Z
 8e0:	84 60       	ori	r24, 0x04	; 4
 8e2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 8e4:	80 81       	ld	r24, Z
 8e6:	82 60       	ori	r24, 0x02	; 2
 8e8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 8ea:	80 81       	ld	r24, Z
 8ec:	81 60       	ori	r24, 0x01	; 1
 8ee:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 8f0:	80 81       	ld	r24, Z
 8f2:	80 68       	ori	r24, 0x80	; 128
 8f4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 8f6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 8fa:	08 95       	ret

000008fc <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 8fc:	8e 30       	cpi	r24, 0x0E	; 14
 8fe:	08 f0       	brcs	.+2      	; 0x902 <__stack+0x3>
 900:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 902:	20 91 1f 01 	lds	r18, 0x011F	; 0x80011f <analog_reference>
 906:	90 e4       	ldi	r25, 0x40	; 64
 908:	29 9f       	mul	r18, r25
 90a:	90 01       	movw	r18, r0
 90c:	11 24       	eor	r1, r1
 90e:	87 70       	andi	r24, 0x07	; 7
 910:	82 2b       	or	r24, r18
 912:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 916:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 91a:	80 64       	ori	r24, 0x40	; 64
 91c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 920:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 924:	86 fd       	sbrc	r24, 6
 926:	fc cf       	rjmp	.-8      	; 0x920 <__stack+0x21>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 928:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
 92c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 930:	90 e0       	ldi	r25, 0x00	; 0
}
 932:	92 2b       	or	r25, r18
 934:	08 95       	ret

00000936 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 936:	83 30       	cpi	r24, 0x03	; 3
 938:	81 f0       	breq	.+32     	; 0x95a <turnOffPWM+0x24>
 93a:	28 f4       	brcc	.+10     	; 0x946 <turnOffPWM+0x10>
 93c:	81 30       	cpi	r24, 0x01	; 1
 93e:	99 f0       	breq	.+38     	; 0x966 <turnOffPWM+0x30>
 940:	82 30       	cpi	r24, 0x02	; 2
 942:	a1 f0       	breq	.+40     	; 0x96c <turnOffPWM+0x36>
 944:	08 95       	ret
 946:	87 30       	cpi	r24, 0x07	; 7
 948:	a9 f0       	breq	.+42     	; 0x974 <turnOffPWM+0x3e>
 94a:	88 30       	cpi	r24, 0x08	; 8
 94c:	b9 f0       	breq	.+46     	; 0x97c <turnOffPWM+0x46>
 94e:	84 30       	cpi	r24, 0x04	; 4
 950:	d1 f4       	brne	.+52     	; 0x986 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 952:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 956:	8f 7d       	andi	r24, 0xDF	; 223
 958:	03 c0       	rjmp	.+6      	; 0x960 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 95a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 95e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 960:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 964:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 966:	84 b5       	in	r24, 0x24	; 36
 968:	8f 77       	andi	r24, 0x7F	; 127
 96a:	02 c0       	rjmp	.+4      	; 0x970 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 96c:	84 b5       	in	r24, 0x24	; 36
 96e:	8f 7d       	andi	r24, 0xDF	; 223
 970:	84 bd       	out	0x24, r24	; 36
 972:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 974:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 978:	8f 77       	andi	r24, 0x7F	; 127
 97a:	03 c0       	rjmp	.+6      	; 0x982 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 97c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 980:	8f 7d       	andi	r24, 0xDF	; 223
 982:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 986:	08 95       	ret

00000988 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	fc 01       	movw	r30, r24
 990:	e4 58       	subi	r30, 0x84	; 132
 992:	ff 4f       	sbci	r31, 0xFF	; 255
 994:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 996:	fc 01       	movw	r30, r24
 998:	e0 57       	subi	r30, 0x70	; 112
 99a:	ff 4f       	sbci	r31, 0xFF	; 255
 99c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 99e:	88 23       	and	r24, r24
 9a0:	61 f1       	breq	.+88     	; 0x9fa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	fc 01       	movw	r30, r24
 9aa:	e8 54       	subi	r30, 0x48	; 72
 9ac:	ff 4f       	sbci	r31, 0xFF	; 255
 9ae:	c5 91       	lpm	r28, Z+
 9b0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 9b2:	fc 01       	movw	r30, r24
 9b4:	e2 55       	subi	r30, 0x52	; 82
 9b6:	ff 4f       	sbci	r31, 0xFF	; 255
 9b8:	a5 91       	lpm	r26, Z+
 9ba:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 9bc:	61 11       	cpse	r22, r1
 9be:	09 c0       	rjmp	.+18     	; 0x9d2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 9c0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9c2:	f8 94       	cli
		*reg &= ~bit;
 9c4:	88 81       	ld	r24, Y
 9c6:	20 95       	com	r18
 9c8:	82 23       	and	r24, r18
 9ca:	88 83       	st	Y, r24
		*out &= ~bit;
 9cc:	ec 91       	ld	r30, X
 9ce:	2e 23       	and	r18, r30
 9d0:	0b c0       	rjmp	.+22     	; 0x9e8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 9d2:	62 30       	cpi	r22, 0x02	; 2
 9d4:	61 f4       	brne	.+24     	; 0x9ee <pinMode+0x66>
		uint8_t oldSREG = SREG;
 9d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9d8:	f8 94       	cli
		*reg &= ~bit;
 9da:	88 81       	ld	r24, Y
 9dc:	32 2f       	mov	r19, r18
 9de:	30 95       	com	r19
 9e0:	83 23       	and	r24, r19
 9e2:	88 83       	st	Y, r24
		*out |= bit;
 9e4:	ec 91       	ld	r30, X
 9e6:	2e 2b       	or	r18, r30
 9e8:	2c 93       	st	X, r18
		SREG = oldSREG;
 9ea:	9f bf       	out	0x3f, r25	; 63
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 9ee:	8f b7       	in	r24, 0x3f	; 63
                cli();
 9f0:	f8 94       	cli
		*reg |= bit;
 9f2:	e8 81       	ld	r30, Y
 9f4:	2e 2b       	or	r18, r30
 9f6:	28 83       	st	Y, r18
		SREG = oldSREG;
 9f8:	8f bf       	out	0x3f, r24	; 63
	}
}
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a00:	1f 93       	push	r17
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a06:	28 2f       	mov	r18, r24
 a08:	30 e0       	ldi	r19, 0x00	; 0
 a0a:	f9 01       	movw	r30, r18
 a0c:	e8 59       	subi	r30, 0x98	; 152
 a0e:	ff 4f       	sbci	r31, 0xFF	; 255
 a10:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a12:	f9 01       	movw	r30, r18
 a14:	e4 58       	subi	r30, 0x84	; 132
 a16:	ff 4f       	sbci	r31, 0xFF	; 255
 a18:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a1a:	f9 01       	movw	r30, r18
 a1c:	e0 57       	subi	r30, 0x70	; 112
 a1e:	ff 4f       	sbci	r31, 0xFF	; 255
 a20:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a22:	cc 23       	and	r28, r28
 a24:	c1 f0       	breq	.+48     	; 0xa56 <digitalWrite+0x56>
 a26:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a28:	81 11       	cpse	r24, r1
 a2a:	0e 94 9b 04 	call	0x936	; 0x936 <turnOffPWM>

	out = portOutputRegister(port);
 a2e:	ec 2f       	mov	r30, r28
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	ee 0f       	add	r30, r30
 a34:	ff 1f       	adc	r31, r31
 a36:	e2 55       	subi	r30, 0x52	; 82
 a38:	ff 4f       	sbci	r31, 0xFF	; 255
 a3a:	a5 91       	lpm	r26, Z+
 a3c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 a3e:	9f b7       	in	r25, 0x3f	; 63
	cli();
 a40:	f8 94       	cli

	if (val == LOW) {
 a42:	11 11       	cpse	r17, r1
 a44:	04 c0       	rjmp	.+8      	; 0xa4e <digitalWrite+0x4e>
		*out &= ~bit;
 a46:	8c 91       	ld	r24, X
 a48:	d0 95       	com	r29
 a4a:	d8 23       	and	r29, r24
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <digitalWrite+0x52>
	} else {
		*out |= bit;
 a4e:	ec 91       	ld	r30, X
 a50:	de 2b       	or	r29, r30
 a52:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
 a54:	9f bf       	out	0x3f, r25	; 63
}
 a56:	df 91       	pop	r29
 a58:	cf 91       	pop	r28
 a5a:	1f 91       	pop	r17
 a5c:	08 95       	ret

00000a5e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 a5e:	08 95       	ret

00000a60 <__divmodhi4>:
 a60:	97 fb       	bst	r25, 7
 a62:	07 2e       	mov	r0, r23
 a64:	16 f4       	brtc	.+4      	; 0xa6a <__divmodhi4+0xa>
 a66:	00 94       	com	r0
 a68:	07 d0       	rcall	.+14     	; 0xa78 <__divmodhi4_neg1>
 a6a:	77 fd       	sbrc	r23, 7
 a6c:	09 d0       	rcall	.+18     	; 0xa80 <__divmodhi4_neg2>
 a6e:	0e 94 85 05 	call	0xb0a	; 0xb0a <__udivmodhi4>
 a72:	07 fc       	sbrc	r0, 7
 a74:	05 d0       	rcall	.+10     	; 0xa80 <__divmodhi4_neg2>
 a76:	3e f4       	brtc	.+14     	; 0xa86 <__divmodhi4_exit>

00000a78 <__divmodhi4_neg1>:
 a78:	90 95       	com	r25
 a7a:	81 95       	neg	r24
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__divmodhi4_neg2>:
 a80:	70 95       	com	r23
 a82:	61 95       	neg	r22
 a84:	7f 4f       	sbci	r23, 0xFF	; 255

00000a86 <__divmodhi4_exit>:
 a86:	08 95       	ret

00000a88 <__udivmodsi4>:
 a88:	a1 e2       	ldi	r26, 0x21	; 33
 a8a:	1a 2e       	mov	r1, r26
 a8c:	aa 1b       	sub	r26, r26
 a8e:	bb 1b       	sub	r27, r27
 a90:	fd 01       	movw	r30, r26
 a92:	0d c0       	rjmp	.+26     	; 0xaae <__udivmodsi4_ep>

00000a94 <__udivmodsi4_loop>:
 a94:	aa 1f       	adc	r26, r26
 a96:	bb 1f       	adc	r27, r27
 a98:	ee 1f       	adc	r30, r30
 a9a:	ff 1f       	adc	r31, r31
 a9c:	a2 17       	cp	r26, r18
 a9e:	b3 07       	cpc	r27, r19
 aa0:	e4 07       	cpc	r30, r20
 aa2:	f5 07       	cpc	r31, r21
 aa4:	20 f0       	brcs	.+8      	; 0xaae <__udivmodsi4_ep>
 aa6:	a2 1b       	sub	r26, r18
 aa8:	b3 0b       	sbc	r27, r19
 aaa:	e4 0b       	sbc	r30, r20
 aac:	f5 0b       	sbc	r31, r21

00000aae <__udivmodsi4_ep>:
 aae:	66 1f       	adc	r22, r22
 ab0:	77 1f       	adc	r23, r23
 ab2:	88 1f       	adc	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	1a 94       	dec	r1
 ab8:	69 f7       	brne	.-38     	; 0xa94 <__udivmodsi4_loop>
 aba:	60 95       	com	r22
 abc:	70 95       	com	r23
 abe:	80 95       	com	r24
 ac0:	90 95       	com	r25
 ac2:	9b 01       	movw	r18, r22
 ac4:	ac 01       	movw	r20, r24
 ac6:	bd 01       	movw	r22, r26
 ac8:	cf 01       	movw	r24, r30
 aca:	08 95       	ret

00000acc <__divmodsi4>:
 acc:	05 2e       	mov	r0, r21
 ace:	97 fb       	bst	r25, 7
 ad0:	1e f4       	brtc	.+6      	; 0xad8 <__divmodsi4+0xc>
 ad2:	00 94       	com	r0
 ad4:	0e 94 7d 05 	call	0xafa	; 0xafa <__negsi2>
 ad8:	57 fd       	sbrc	r21, 7
 ada:	07 d0       	rcall	.+14     	; 0xaea <__divmodsi4_neg2>
 adc:	0e 94 44 05 	call	0xa88	; 0xa88 <__udivmodsi4>
 ae0:	07 fc       	sbrc	r0, 7
 ae2:	03 d0       	rcall	.+6      	; 0xaea <__divmodsi4_neg2>
 ae4:	4e f4       	brtc	.+18     	; 0xaf8 <__divmodsi4_exit>
 ae6:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__negsi2>

00000aea <__divmodsi4_neg2>:
 aea:	50 95       	com	r21
 aec:	40 95       	com	r20
 aee:	30 95       	com	r19
 af0:	21 95       	neg	r18
 af2:	3f 4f       	sbci	r19, 0xFF	; 255
 af4:	4f 4f       	sbci	r20, 0xFF	; 255
 af6:	5f 4f       	sbci	r21, 0xFF	; 255

00000af8 <__divmodsi4_exit>:
 af8:	08 95       	ret

00000afa <__negsi2>:
 afa:	90 95       	com	r25
 afc:	80 95       	com	r24
 afe:	70 95       	com	r23
 b00:	61 95       	neg	r22
 b02:	7f 4f       	sbci	r23, 0xFF	; 255
 b04:	8f 4f       	sbci	r24, 0xFF	; 255
 b06:	9f 4f       	sbci	r25, 0xFF	; 255
 b08:	08 95       	ret

00000b0a <__udivmodhi4>:
 b0a:	aa 1b       	sub	r26, r26
 b0c:	bb 1b       	sub	r27, r27
 b0e:	51 e1       	ldi	r21, 0x11	; 17
 b10:	07 c0       	rjmp	.+14     	; 0xb20 <__udivmodhi4_ep>

00000b12 <__udivmodhi4_loop>:
 b12:	aa 1f       	adc	r26, r26
 b14:	bb 1f       	adc	r27, r27
 b16:	a6 17       	cp	r26, r22
 b18:	b7 07       	cpc	r27, r23
 b1a:	10 f0       	brcs	.+4      	; 0xb20 <__udivmodhi4_ep>
 b1c:	a6 1b       	sub	r26, r22
 b1e:	b7 0b       	sbc	r27, r23

00000b20 <__udivmodhi4_ep>:
 b20:	88 1f       	adc	r24, r24
 b22:	99 1f       	adc	r25, r25
 b24:	5a 95       	dec	r21
 b26:	a9 f7       	brne	.-22     	; 0xb12 <__udivmodhi4_loop>
 b28:	80 95       	com	r24
 b2a:	90 95       	com	r25
 b2c:	bc 01       	movw	r22, r24
 b2e:	cd 01       	movw	r24, r26
 b30:	08 95       	ret

00000b32 <__tablejump2__>:
 b32:	ee 0f       	add	r30, r30
 b34:	ff 1f       	adc	r31, r31
 b36:	05 90       	lpm	r0, Z+
 b38:	f4 91       	lpm	r31, Z
 b3a:	e0 2d       	mov	r30, r0
 b3c:	09 94       	ijmp

00000b3e <__do_global_dtors>:
 b3e:	10 e0       	ldi	r17, 0x00	; 0
 b40:	c2 e6       	ldi	r28, 0x62	; 98
 b42:	d0 e0       	ldi	r29, 0x00	; 0
 b44:	04 c0       	rjmp	.+8      	; 0xb4e <__do_global_dtors+0x10>
 b46:	fe 01       	movw	r30, r28
 b48:	0e 94 99 05 	call	0xb32	; 0xb32 <__tablejump2__>
 b4c:	21 96       	adiw	r28, 0x01	; 1
 b4e:	c3 36       	cpi	r28, 0x63	; 99
 b50:	d1 07       	cpc	r29, r17
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__do_global_dtors+0x8>
 b54:	f8 94       	cli

00000b56 <__stop_program>:
 b56:	ff cf       	rjmp	.-2      	; 0xb56 <__stop_program>
